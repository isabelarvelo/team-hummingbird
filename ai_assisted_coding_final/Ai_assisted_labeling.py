# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_ai_labeling.ipynb.

# %% auto 0
__all__ = ['ClassroomAnalysis', 'apply_excel_color_styles', 'get_table_download_link']

# %% ../nbs/01_ai_labeling.ipynb 6
import numpy as np
import pandas as pd
from io import BytesIO
import base64
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import PatternFill

class ClassroomAnalysis:
    def __init__(self):
        pass

    def apply_rule_based_override(self, text):
        """
        Applies override rules to improve the accuracy of the result based on the given classroom site.
        """
        positive_words = ['great', 'well', 'excellent', 'good', 'proud', 'amazing']
        negative_words = ['bad', 'stop', 'disrespectful', 'quiet', 'get out']
        text_lower = text.lower()
        
        if any(word in text_lower for word in positive_words):
            return 'PRS'
        elif any(word in text_lower for word in negative_words):
            return 'REP'
        elif text.strip().endswith('?'):
            return 'OTR'
        return None

    def color_maps(self, val):
        """
        Takes a scalar and returns a string with the css property `background-color` for a specific color.
        Uses a non-linear scale for color mapping.
        """
        if np.isnan(val):
            return ''
        elif val < 0.2:
            return 'background-color: #ffffcc'  # light yellow
        elif val < 0.3:
            return 'background-color: #d9f0a3'  # light green
        elif val < 0.4:
            return 'background-color: #addd8e'  # green
        elif val < 0.5:
            return 'background-color: #78c679'  # darker green
        else:
            return 'background-color: #31a354'  # dark green

# %% ../nbs/01_ai_labeling.ipynb 7
def apply_excel_color_styles(df, target_columns):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='openpyxl')
        df.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        
        for idx, row in df.iterrows():
            for col_idx, col_name in enumerate(df.columns):
                if col_name in target_columns:
                    cell = worksheet.cell(row=idx + 2, column=col_idx + 1)
                    color = ClassroomAnalysis.color_maps(row[col_name])
                    if color:
                        cell.fill = PatternFill(start_color=color, end_color=color, fill_type="solid")
        writer.close()
        return output.getvalue()

# %% ../nbs/01_ai_labeling.ipynb 8
def get_table_download_link(df, target_columns):
        processed_data = apply_excel_color_styles(df, target_columns)
        b64 = base64.b64encode(processed_data).decode()
        href = f'<a href="data:application/octet-stream;base64,{b64}" download="processed_data.xlsx">Download processed data as Excel</a>'
        return href
