# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_ai_labeling.ipynb.

# %% auto 0
__all__ = ['apply_rule_based_override', 'color_maps', 'color_maps_for_st', 'apply_excel_color_styles', 'get_table_download_link']

# %% ../nbs/01_ai_labeling.ipynb 7
def apply_rule_based_override(text):
    """
    Applies override rules to improve the accuracy of the result based on the given classroom site.
    """
    positive_words = ['great', 'well', 'excellent', 'good', 'proud', 'amazing']
    negative_words = ['bad', 'stop', 'disrespectful', 'quiet', 'get out']
    text_lower = text.lower()
    
    if any(word in text_lower for word in positive_words):
        return 'PRS'
    elif any(word in text_lower for word in negative_words):
        return 'REP'
    elif text.strip().endswith('?'):
        return 'OTR'
    return None

# %% ../nbs/01_ai_labeling.ipynb 8
def color_maps(val):
    """
    Returns the color code for the given confidence level. This is used to color the cells in the excel sheet.
    """
    import numpy as np

    if np.isnan(val):
        return None  # Return None for NaN values
    elif val < 0.2:
        return 'FFFFCC'  # light yellow
    elif val < 0.3:
        return 'FFD9F0A3'  # light green
    elif val < 0.4:
        return 'FFADDD8E'  # green
    elif val < 0.5:
        return 'FF78C679'  # darker green
    else:
        return 'FF31A354'  # dark green


# %% ../nbs/01_ai_labeling.ipynb 9
def color_maps_for_st(val):
    """
    Returns the color code for the given confidence level. This is used to color the cells in the excel sheet.
    """
    import numpy as np

    if np.isnan(val):
        return ''  # No style for NaN values
    elif val < 0.2:
        return 'background-color: #FFFFCC'  # light yellow
    elif val < 0.3:
        return 'background-color: #D9F0A3'  # light green
    elif val < 0.4:
        return 'background-color: #ADDD8E'  # green
    elif val < 0.5:
        return 'background-color: #78C679'  # darker green
    else:
        return 'background-color: #31A354'  # dark green



# %% ../nbs/01_ai_labeling.ipynb 10
def apply_excel_color_styles(df, target_columns):
    """
    Applies color styles to the given dataframe based on the confidence level of the given target columns.
    """
    from io import BytesIO
    import pandas as pd 
    from openpyxl.styles import PatternFill
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='openpyxl')
    df.to_excel(writer, index=False, sheet_name='Sheet1')
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']

    for idx, row in df.iterrows():
        for col_idx, col_name in enumerate(df.columns):
            if col_name in target_columns:
                cell = worksheet.cell(row=idx + 2, column=col_idx + 1)
                color_code = color_maps(row[col_name])
                if color_code:
                    cell.fill = PatternFill(start_color=color_code, end_color=color_code, fill_type="solid")
    writer.close()
    return output.getvalue()

# %% ../nbs/01_ai_labeling.ipynb 11
def get_table_download_link(df, target_columns):
    """
    Generates a link allowing the data in a given pandas dataframe to be downloaded
    """
    import base64
    processed_data = apply_excel_color_styles(df, target_columns)
    b64 = base64.b64encode(processed_data).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="processed_data.xlsx">Download processed data as Excel</a>'
    return href
