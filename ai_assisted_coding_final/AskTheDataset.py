# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_ask-the-dataset.ipynb.

# %% auto 0
__all__ = ['CSVFileManager', 'GPTQuestionsHandler']

# %% ../nbs/02_ask-the-dataset.ipynb 3
import pandas as pd
import os
import getpass
import openai
from openai import OpenAI
import gradio as gr
from io import StringIO
import sys

# %% ../nbs/02_ask-the-dataset.ipynb 4
class CSVFileManager:
    """This class is responsible for handling CSV file operations. 
    It can read one or more CSV files, either from file paths or file-like objects, and concatenate them into a single pandas DataFrame.
    """
    def __init__(self):
        self.data_frame = None

    def load_data(self, files):
        
        if not files:
            raise ValueError("No files provided.")

        data_frames = []
        for file in files:
            # Check if the file is a string (path) or a file-like object
            if isinstance(file, str):
                df = pd.read_csv(file)
            else:  # Assuming file-like object
                df = pd.read_csv(file)
            data_frames.append(df)

        self.data_frame = pd.concat(data_frames, ignore_index=True)
        return self.data_frame

class GPTQuestionsHandler:
    """This class interfaces with OpenAI's GPT model. 
    It sends user queries about the dataset to the GPT model and retrieves responses.
    """
    
    def __init__(self, api_key):

        # Initializes the OpenAI API client

        self.api_key = api_key
        os.environ["OPENAI_API_KEY"] = api_key
        self.client = OpenAI()

    def ask_gpt(self, history, data):
        """
        Sends a question and data to the OpenAI API and retrieves the response
        Arguments: The user's question about the data
        Data is input to the model in string format
        Model returns the response from the API
        """
        
        system_message = {
            "role": "system", 
            "content":("You are a helpful assistant skilled at data science and data analysis. "
                          "You are an expert at reading files, interpreting them and also writing python codes. "
                          "Here is the data you need to work with:\n" + data)}
        
        # Create a copy of history to include system message for API call
        messages_for_api = [system_message] + history

        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo-1106",
            temperature=0.7,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            messages=messages_for_api)
        answer= response.choices[0].message.content
        # Update the conversation history with the new response
        history.append({"role": "assistant", "content": answer})
        
        return answer
    

